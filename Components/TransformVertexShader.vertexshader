#version 120

// Input vertex data, different for all executions of this shader.
attribute vec3 vertexPosition_modelspace;
attribute vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
varying vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

//Jeff : what is gl_position? Where is it used?
//Note(this was an answer to a openGL 3.3 question, but stil applies)
//  The vertex coordinate interface between vertex shader and 
//  fragment shader, which primarily consists of the gl_Position 
//  output in the vertex shader and the gl_FragCoord input in the 
//  fragment shader. There are still a number of fixed function 
//  blocks sitting between vertex and fragment shaders, like 
//  clipping and rasterization. Those fixed function blocks operate 
//  on vertex coordinates, so the pre-defined variables still make sense.
